[build-system]
build-backend = "hatchling.build"

requires = [
  "hatch-vcs>=0.5.0,<0.6.0",
  "hatchling>=1.27.0,<1.28.0",
]

[project]
name = "usethis"
description = "Automate Python project setup and development tasks that are otherwise performed manually."
readme = "README.md"
keywords = [ "init", "project", "setup", "start", "usethis" ]
license = { file = "LICENSE" }
authors = [
  { name = "Nathan McDougall", email = "nathan.j.mcdougall@gmail.com" },
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Typing :: Typed",
]
dynamic = [
  "urls",
  "version",
]
dependencies = [
  "click>=8.0.0",
  "configupdater>=3.2",
  "grimp>=2.5.0",
  "mergedeep>=1.3.4",
  "packaging>=20.9",
  "pydantic>=2.5.0",
  "requests>=2.26.0",
  "rich>=9.6.1",
  "ruamel-yaml>=0.16.13",
  "tomlkit>=0.12.0",
  "typer>=0.12.4",
  "typing-extensions>=3.10.0.0",
]
scripts.usethis = "usethis.__main__:app"

[dependency-groups]
dev = [
  "datamodel-code-generator[http]>=0.28.2",
  "deptry>=0.23.0",
  "import-linter>=2.3",
  "jinja2>=3.1.6",
  "pre-commit>=4.2.0",
  "pyright[nodejs]>=1.1.399",
  "ruff>=0.11.5",
]
test = [
  "coverage[toml]>=7.7.1",
  "gitpython>=3.1.44",
  "pytest>=8.3.5",
  "pytest-codspeed>=3.2.0",
  "pytest-cov>=6.0.0",
  "pytest-emoji>=0.2.0",
  "pytest-md>=0.2.0",
]
doc = [
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.10",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata.hooks.vcs.urls]
"Source Code" = "https://github.com/usethis-python/usethis-python"
"Bug Tracker" = "https://github.com/usethis-python/usethis-python/issues"
"Releases" = "https://github.com/usethis-python/usethis-python/releases"
"Source Archive" = "https://github.com/usethis-python/usethis-python/archive/{commit_hash}.zip"

[tool.hatch.build.hooks.vcs]
version-file = "src/usethis/_version.py"

[tool.ruff]
line-length = 88

format.docstring-code-format = true

lint.select = [
  "A",
  "ARG",
  "B",
  "C4",
  "D",
  "E4",
  "E7",
  "E9",
  "EM",
  "ERA",
  "F",
  "FIX002",
  "FLY",
  "FURB",
  "I",
  "INP",
  "PLE",
  "PLR",
  "PT",
  "RUF",
  "S",
  "SIM",
  "TC",
  "UP",
]
lint.ignore = [ "PLR2004", "S101", "SIM108" ]
lint.per-file-ignores."!tests/**/*.py" = [ "ARG002" ]
lint.per-file-ignores."tests/**/*.py" = [ "D", "INP", "S603", "TC" ]
lint.flake8-bugbear.extend-immutable-calls = [ "typer.Argument", "typer.Option" ]

lint.flake8-type-checking.quote-annotations = true
lint.flake8-type-checking.runtime-evaluated-base-classes = [ "pydantic.BaseModel" ]
lint.flake8-type-checking.strict = true
lint.pydocstyle.convention = "google"

[tool.codespell]
ignore-words-list = [ "edn" ]

[tool.deptry.per_rule_ignores]
DEP002 = [ "click" ] # https://github.com/usethis-python/usethis-python/issues/623

[tool.pyproject-fmt]
keep_full_version = true

[tool.pytest.ini_options]
testpaths = [ "tests", "src" ]
addopts = [
  "--import-mode=importlib",
  "-ra",
  "--showlocals",
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
]
doctest_optionflags = "NORMALIZE_WHITESPACE"
filterwarnings = [ "error" ]
xfail_strict = true
log_cli_level = "INFO"
minversion = "7"

[tool.coverage.run]
source = [ "src" ]
omit = [ "*/pytest-of-*/*" ]

[tool.coverage.report]
exclude_also = [
  "if TYPE_CHECKING:",
  "raise AssertionError",
  "raise NotImplementedError",
  "assert_never(.*)",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
omit = [ "*/pytest-of-*/*" ]

[tool.uv]
required-version = ">=0.6.8"              # Sync with README
default-groups = [ "test", "dev", "doc" ]
link-mode = "symlink"

[tool.importlinter]
root_packages = [ "usethis" ]

[[tool.importlinter.contracts]]
name = "usethis"
type = "layers"
layers = [
  "_test | __main__",
  "_app",
  "_interface",
  "_options",
  "_toolset",
  "_core",
  "_tool",
  "_config_file",
  "_integrations",
  "_io | _pipeweld | _subprocess | _console",
  "_config | errors",
]
containers = [ "usethis" ]
exhaustive = true
exhaustive_ignores = [ "_version" ]

[[tool.importlinter.contracts]]
name = "usethis._interface"
type = "layers"
layers = [
  # Note; if you're adding an interface, make sure it's in the README too.
  "author | badge | browse | ci | doc | docstyle | format_ | init | lint | list | readme | rule | show | spellcheck | status | test | tool | version",
]
containers = [ "usethis._interface" ]
exhaustive = true

[[tool.importlinter.contracts]]
name = "usethis._core"
type = "layers"
layers = [
  # docstyle uses (Ruff) tool, badge uses readme
  "badge | docstyle | list | rule",
  "author | browse | ci | readme | show | status | tool",
  "enums",
]
containers = [ "usethis._core" ]
exhaustive = true

[[tool.importlinter.contracts]]
name = "usethis._tool"
type = "layers"
layers = [
  "all_",
  "impl",
  "base",
  "config | pre_commit | rule",
]
containers = [ "usethis._tool" ]
exhaustive = true

[[tool.importlinter.contracts]]
name = "usethis._tool.impl"
type = "layers"
layers = [
  "pyproject_toml",
  "codespell | deptry | import_linter | pyproject_fmt | requirements_txt",
  "ruff",
  "pytest : coverage_py",
  "pre_commit | mkdocs",
]
containers = [ "usethis._tool.impl" ]
exhaustive = true

[[tool.importlinter.contracts]]
name = "usethis._integrations"
type = "layers"
layers = [
  "ci | pre_commit",
  "uv | mkdocs | pytest | pydantic | sonarqube",
  "project | python",
  "file",
]
containers = [ "usethis._integrations" ]
exhaustive = true

[[tool.importlinter.contracts]]
name = "usethis._integrations.file"
type = "layers"
layers = [
  "pyproject_toml | setup_cfg",
  "ini | toml | yaml",
  "dir",
]
containers = [ "usethis._integrations.file" ]
exhaustive = true

[[tool.importlinter.contracts]]
name = "usethis._pipeweld"
type = "layers"
layers = [ "func", "result", "containers | ops" ]
containers = [ "usethis._pipeweld" ]
exhaustive = true

[[tool.importlinter.contracts]]
name = "usethis._integrations.ci"
type = "layers"
layers = [
  "bitbucket | github",
]
containers = [ "usethis._integrations.ci" ]
exhaustive = true
